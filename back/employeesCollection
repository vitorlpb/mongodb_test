import { mysqlConnection } from "../db.js";

let employees = [];
let salaries = [];
let titles = [];
let deptManager = [];
let deptEmployees = [];
let departments = [];

const main = async () => {
  try {
    // Busca os dados de todas as tabelas
    employees = await fetchEmployees();
    salaries = await fetchSalaries();
    titles = await fetchTitles();
    deptEmployees = await fetchDeptEmployees();
    deptManager = await fetchDeptManager();
    departments = await fetchDepartments();

    // Constrói a árvore JSON
    const employeeTree = buildEmployeeTree();
    return employeeTree; // Retorna a árvore JSON
  } catch (err) {
    console.error("Erro ao construir a árvore de funcionários:", err.message);
    throw err; // Lança o erro para ser tratado pela rota
  }
};
const buildEmployeeTree = () => {
  return employees.map((emp) => {
    // Filtra os dados relacionados ao funcionário atual
    const empSalaries = salaries.filter((sal) => sal.emp_no === emp.emp_no);
    const empTitles = titles.filter((title) => title.emp_no === emp.emp_no);
    const empDeptEmployees = deptEmployees.filter((deptEmp) => deptEmp.emp_no === emp.emp_no);
    const empDeptManager = deptManager.filter((deptMan) => deptMan.emp_no === emp.emp_no);
    const empDepartments = empDeptEmployees.map((deptEmp) =>
      departments.find((dept) => dept.dept_no === deptEmp.dept_no)
    );

    return {
      emp_no: emp.emp_no,
      birth_date: emp.birth_date,
      first_name: emp.first_name,
      last_name: emp.last_name,
      gender: emp.gender,
      hire_date: emp.hire_date,
      salaries: empSalaries.map((sal) => ({
        emp_no: sal.emp_no,
        salary: sal.salary,
        from_date: sal.from_date,
        to_date: sal.to_date,
      })),
      titles: empTitles.map((title) => ({
        emp_no: title.emp_no,
        title: title.title,
        from_date: title.from_date,
        to_date: title.to_date,
      })),
      dept_manager: empDeptManager.map((deptMan) => ({
        emp_no: deptMan.emp_no,
        dept_no: deptMan.dept_no,
        from_date: deptMan.from_date,
        to_date: deptMan.to_date,
      })),
      dept_emp: empDeptEmployees.map((deptEmp) => ({
        emp_no: deptEmp.emp_no,
        dept_no: deptEmp.dept_no,
        from_date: deptEmp.from_date,
        to_date: deptEmp.to_date,
      })),
      departments: empDepartments.map((dept) => ({
        dept_no: dept.dept_no,
        dept_name: dept.dept_name,
      })),
    };
  });
};

const fetchDepartments = async () => {
  let connection;
  try {
    connection = await mysqlConnection();
    const [rows] = await connection.execute('SELECT * FROM departments LIMIT 10');
    // departments.push(rows);
    //console.log(departments);
    return rows;
  } catch (err) {
    console.error('Erro ao executar a consulta:', err.message);
    throw err;
  } finally {
    if (connection) {
      await connection.end();
      console.log("Conexão com o MySQL encerrada.");
    }
  }
}

const fetchDeptEmployees = async () => {
  let connection;
  try {
    connection = await mysqlConnection();
    const [rows] = await connection.execute('SELECT * FROM dept_emp LIMIT 10');
    // deptEmployees.push(rows);
    //console.log(deptEmployees);
    return rows;
  } catch (err) {
    console.error('Erro ao executar a consulta:', err.message);
    throw err;
  } finally {
    if (connection) {
      await connection.end();
      console.log("Conexão com o MySQL encerrada.");
    }
  }
}

const fetchDeptManager = async () => {
  let connection;
  try {
    connection = await mysqlConnection();
    const [rows] = await connection.execute('SELECT * FROM dept_manager LIMIT 10');
    // deptManager.push(rows);
    //console.log(deptManager);
    return rows;
  } catch (err) {
    console.error('Erro ao executar a consulta:', err.message);
    throw err;
  } finally {
    if (connection) {
      await connection.end();
      console.log("Conexão com o MySQL encerrada.");
    }
  }
}

const fetchTitles = async () => {
  let connection;
  try {
    connection = await mysqlConnection();
    const [rows] = await connection.execute('SELECT * FROM titles LIMIT 10');
    // titles.push(rows);
   // console.log(titles);
    return rows;
  } catch (err) {
    console.error('Erro ao executar a consulta:', err.message);
    throw err;
  } finally {
    if (connection) {
      await connection.end();
      console.log("Conexão com o MySQL encerrada.");
    }
  }
}

const fetchSalaries = async () => {
  let connection;
  try {
    connection = await mysqlConnection();
    const [rows] = await connection.execute('SELECT * FROM salaries LIMIT 10');
    // salary.push(rows);
    //console.log(salary);
    return rows;
  } catch (err) {
    console.error('Erro ao executar a consulta:', err.message);
    throw err;
  } finally {
    if (connection) {
      await connection.end();
      console.log("Conexão com o MySQL encerrada.");
    }
  }
};


const fetchEmployees = async () => {
  let connection;
  try {
    connection = await mysqlConnection();
    const [rows] = await connection.execute('SELECT * FROM employees LIMIT 10');
    //employee.push(rows);
    //console.log(employee);
    return rows;
  } catch (err) {
    console.error('Erro ao executar a consulta:', err.message);
    throw err;
  } finally {
    if (connection) {
      await connection.end();
      console.log("Conexão com o MySQL encerrada.");
    }
  }
};

export { 
  fetchEmployees,
  fetchSalaries,
  main
};